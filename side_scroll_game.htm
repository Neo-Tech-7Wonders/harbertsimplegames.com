<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Side Scroller Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #ffffff;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const gravity = 0.5;
        let player = {
            x: 50,
            y: canvas.height - 150,
            width: 50,
            height: 50,
            speed: 5,
            dx: 0,
            dy: 0,
            jumping: false,
            speedBoost: false
        };

        let platforms = [
            { x: 0, y: canvas.height - 100, width: canvas.width, height: 20 },
            { x: 200, y: canvas.height - 200, width: 100, height: 20 },
            { x: 400, y: canvas.height - 300, width: 100, height: 20 },
            { x: 600, y: canvas.height - 400, width: 100, height: 20 },
            { x: 800, y: canvas.height - 500, width: 100, height: 20 },
            { x: 1000, y: canvas.height - 600, width: 1000, height: 20 }
        ];

        let enemies = [
            { x: 300, y: canvas.height - 150, width: 50, height: 50, dx: 2 },
            { x: 200, y: canvas.height - 150, width: 50, height: 50, dx: 2 },
            { x: 1000, y: canvas.height - 650, width: 50, height: 50, dx: 2 },
            { x: 100, y: canvas.height - 150, width: 50, height: 50, dx: 2 }
        ];

        let powerUps = [
            { x: 1200, y: canvas.height - 650, width: 20, height: 20 },
            { x: 600, y: canvas.height - 50, width: 20, height: 20 }
        ];

        let gameState = 'playing'; // Possible states: 'playing', 'won'

        function drawPlayer() {
            ctx.fillStyle = 'red';
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        function drawPlatforms() {
            ctx.fillStyle = 'green';
            platforms.forEach(platform => {
                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);
            });
        }

        function drawEnemies() {
            ctx.fillStyle = 'blue';
            enemies.forEach(enemy => {
                ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
            });
        }

        function drawPowerUps() {
            ctx.fillStyle = 'yellow';
            powerUps.forEach(powerUp => {
                ctx.fillRect(powerUp.x, powerUp.y, powerUp.width, powerUp.height);
            });
        }

        function drawWinningScreen() {
            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'white';
            ctx.font = '48px sans-serif';
            ctx.fillText('You Win!', canvas.width / 2 - 100, canvas.height / 2);
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function newPos() {
            player.x += player.dx;
            player.y += player.dy;

            if (player.y + player.height < canvas.height) {
                player.dy += gravity;
            } else {
                player.dy = 0;
                player.jumping = false;
                player.y = canvas.height - player.height;
            }

            platforms.forEach(platform => {
                if (player.x < platform.x + platform.width &&
                    player.x + player.width > platform.x &&
                    player.y < platform.y + platform.height &&
                    player.y + player.height > platform.y) {
                    player.dy = 0;
                    player.jumping = false;
                    player.y = platform.y - player.height;
                }
            });

            enemies.forEach(enemy => {
                enemy.x += enemy.dx;
                if (enemy.x + enemy.width > canvas.width || enemy.x < 0) {
                    enemy.dx *= -1;
                }

                if (player.x < enemy.x + enemy.width &&
                    player.x + player.width > enemy.x &&
                    player.y < enemy.y + enemy.height &&
                    player.y + player.height > enemy.y) {
                    if (player.dy > 0) {
                        enemies.splice(enemies.indexOf(enemy), 1);
                        player.dy = -10;
                    } else {
                        alert('Game Over');
                        document.location.reload();
                    }
                }
            });

            powerUps.forEach(powerUp => {
                if (player.x < powerUp.x + powerUp.width &&
                    player.x + player.width > powerUp.x &&
                    player.y < powerUp.y + powerUp.height &&
                    player.y + player.height > powerUp.y) {
                    powerUps.splice(powerUps.indexOf(powerUp), 1);
                    player.speedBoost = true;
                    player.speed = 10;
                    setTimeout(() => {
                        player.speedBoost = false;
                        player.speed = 5;
                    }, 5000);
                }
            });
        }

        function moveRight() {
            player.dx = player.speed;
        }

        function moveLeft() {
            player.dx = -player.speed;
        }

        function jump() {
            if (!player.jumping) {
                player.dy = -10;
                player.jumping = true;
            }
        }

        function stopMove() {
            player.dx = 0;
        }

        function update() {
            clearCanvas();

            if (gameState === 'playing') {
                drawPlayer();
                drawPlatforms();
                drawEnemies();
                drawPowerUps();
                newPos();

                // Check if all enemies are defeated
                if (enemies.length === 0) {
                    gameState = 'won';
                }
            } else if (gameState === 'won') {
                drawWinningScreen();
            }

            requestAnimationFrame(update);
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowRight' || e.key === 'd') {
                moveRight();
            } else if (e.key === 'ArrowLeft' || e.key === 'a') {
                moveLeft();
            } else if (e.key === 'ArrowUp' || e.key === 'w') {
                jump();
            }
        });

        document.addEventListener('keyup', (e) => {
            if (e.key === 'ArrowRight' || e.key === 'd' || e.key === 'ArrowLeft' || e.key === 'a') {
                stopMove();
            }
        });

        update();
    </script>
</body>
</html>
